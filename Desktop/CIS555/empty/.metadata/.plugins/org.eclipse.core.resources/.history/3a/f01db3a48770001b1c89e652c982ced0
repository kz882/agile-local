/**
 * CIS 455/555 route-based HTTP framework
 * 
 * V. Liu, Z. Ives
 * 
 * Portions excerpted from or inspired by Spark Framework, 
 * 
 *                 http://sparkjava.com,
 * 
 * with license notice included below.
 */

/*
 * Copyright 2011- Per Wendel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.upenn.cis.cis455.m1.server;



import java.io.File;
import java.io.PrintStream;
import java.lang.Thread.State;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.util.ArrayList;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.util.FileUtils;

import edu.upenn.cis.cis455.exceptions.HaltException;
import edu.upenn.cis.cis455.m1.handling.FileRequestHandler;

public class WebService {
    final static Logger logger = LogManager.getLogger(WebService.class);
    private int port=45555;
    private String rootDir="./www";
    private String ipaddress="0.0.0.0";
    
    protected HttpListener listener;
    protected HttpTaskQueue sharedQueue;
    protected int maxQueueSize;
    protected int threadPoolSize;
    
    public ArrayList<Thread> workerThreads;

    //store routes
    
    /**
     * Launches the Web server thread pool and the listener
     */
    public void start() {
    	maxQueueSize = 4;
    	HttpTaskQueue sharedQueue = new HttpTaskQueue(maxQueueSize);
    	
    	//We start on some existing thread, perhaps the main thread. We'll call it thread 0.

    	//Let's start a new listener on its own thread on port 45555

    	HttpListener listener = new HttpListener(sharedQueue, maxQueueSize, port, ipaddress);
    	// change port and ip address??????
    	Thread listenerThread = new Thread(listener);

    	listenerThread.start();

    	//Now the listener thread is running in the background on its own thread. We can call that thread 1. The listener is in a loop, but its execution can't interfere with our curren thread's execution.

    	HttpWorker worker = new HttpWorker(sharedQueue, maxQueueSize, port, ipaddress);
    	
    	for (int i=0; i<threadPoolSize; i++) {
    		Thread workerThread = new Thread(worker);
    		workerThreads.add(workerThread);
    		workerThread.start();
    	}

    	//Now the worker has started in its own thread, which we can call thread 2. It's in a loop waiting, but that can't stop thread 0 from continuing its execution.

    	//... any code that comes after
    }

    /**
     * Gracefully shut down the server
     */
    public void stop() {}

    /**
     * Hold until the server is fully initialized.
     * Should be called after everything else.
     */
    public void awaitInitialization() {
        logger.info("Initializing server");
        start();
    }

    /**
     * Triggers a HaltException that terminates the request
     */
    public HaltException halt() {
        throw new HaltException();
    }

    /**
     * Triggers a HaltException that terminates the request
     */
    public HaltException halt(int statusCode) {
        throw new HaltException(statusCode);
    }

    /**
     * Triggers a HaltException that terminates the request
     */
    public HaltException halt(String body) {
        throw new HaltException(body);
    }

    /**
     * Triggers a HaltException that terminates the request
     */
    public HaltException halt(int statusCode, String body) {
        throw new HaltException(statusCode, body);
    }

    ////////////////////////////////////////////
    // Server configuration
    ////////////////////////////////////////////

    /**
     * Set the root directory of the "static web" files
     */
    public void staticFileLocation(String directory) {
    	this.rootDir = directory;
    	FileRequestHandler.setRootDir(directory);
    }

    /**
     * Set the IP address to listen on (default 0.0.0.0)
     */
    public void ipAddress(String ipAddress) {
    	this.ipaddress = ipAddress;
    }

    /**
     * Set the TCP port to listen on (default 45555)
     */
    public void port(int port) {
    	this.port = port;
    }

    /**
     * Set the size of the thread pool
     */
    public void threadPool(int threads) {
    	this.threadPoolSize = threads;
    }
    
    ////////////////////////////////////////////
    // Worker Threads
    ////////////////////////////////////////////
    public static void control() {
    	try {
        	StringBuilder sb = new StringBuilder();
            
			URL shutdown = new URL(rootDir+"/shutdown");
			
			sb.append("<html>");
            sb.append("<head>");
            sb.append("<title>Control Panel</title>");
            sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
            sb.append("</head>");
            sb.append("<body>");
            
            for (int i=0; i<this.workerThreads.size(); i++) {
	    		State state = workerThreads.get(i).getState();
	    		sb.append("Workder Thread: " + i + " " + state.toString());
	    	}
            
            sb.append("<a href=" + shutdown+ ">Shut Down</a>");
            sb.append("</body");
            sb.append("</html");
           
            //put things
            
//            File newHtmlFile = new File(shutdown + "/control.html");
//            Files.writeString(shutdown, sb.toString());

			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

    	
    }

}
