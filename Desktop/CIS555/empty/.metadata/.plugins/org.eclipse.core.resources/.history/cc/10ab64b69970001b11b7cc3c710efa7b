package edu.upenn.cis.cis455.m1.handling;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import edu.upenn.cis.cis455.m1.interfaces.HttpRequest;
import edu.upenn.cis.cis455.m1.interfaces.HttpResponse;

public class FileRequestHandler {
	private static String rootDir;
	
	
	public String getRootDir() {
		return rootDir;
	}

	public static void setRootDir(String rootDir) {
		FileRequestHandler.rootDir = rootDir;
	}


	public static void handle(HttpRequest request, HttpResponse response) {
		logger.info("Attempting to retrieve file");
		Path rootPath = Paths.get(rootDir);
		Path inputPath = Paths.get(request.uri());
		
		Path totalPath;
		try { 
			totalPath = rootPath.resolve(inputPath); //InvalidPathException
			File myfile = totalPath.toFile(); //UnsupportedOperationException
			if(myfile.isDirectory()) {
				myfile = myfile.toPath().resolve("index.html").toFile();
			}

			if (!myfile.exists()) {
				response.status(404);
				return;
			}

			if(!myfile.getCanonicalPath().startsWith(rootDir) || !myfile.canRead()) {
				response.status(403);
				return;
			}

			Path path = myfile.toPath();

			// write the MIME type to response content-type filed
			response.type(Files.probeContentType(path));

			// copy the file bytes
			Files.copy(path, response.getSocket().getOutputStream());

			//write the file to the body of the response
			byte[] file = Files.readAllBytes(path);
			response.bodyRaw(file);


		} catch(Exception e) {
			response.status(400);
			return;
		}		
	}
}
